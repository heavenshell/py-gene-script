# -*- coding: utf-8 -*-
"""
    {{project}}.models.meta
    {{separator}}

    Create session and declarative_base.

    A lot or this code was inspired from
    `sqlahelper <https://github.com/Pylons/SQLAHelper>`.

    The reason why rewrite sqlahelper is needless to use
    ZopeTransactionExtension.

    When using ZopeTransactionExtension, following warning raised.

    ..code:
      DeprecationWarning: The implements API is deprecated, and will not work
      in Python3  Use the @implementer class decorator instead.
        implements(IDataManagerSavepoint)

    :copyright: (c) 2010-2012 Mike Orr and contributors
    :license: MIT, see SQLAHelper's license file for more details.
    :copyright: (c) {{year}} {{author}}, All rights reserved.
    :license: BSD, see LICENSE for more details.
"""
from sqlalchemy import create_engine
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker, scoped_session

__all__ = ['Base', 'session', 'init_engine', 'get_engine']


class AttributeContainer(object):
    def _clear(self):
        """Delete all instance attributes. For internal use only."""
        self.__dict__.clear()


engines = AttributeContainer()
bases = AttributeContainer()
sessions = AttributeContainer()


def set_default_engine(engine):
    engines.default = engine
    bases.default.metadata.bind = engine
    sessions.default.remove()
    sessions.default.configure(bind=engine)


def reset():
    engines._clear()
    bases._clear()
    sessions._clear()
    engines.default = None
    bases.default = declarative_base()
    sm = sessionmaker(extension=[])
    sessions.default = scoped_session(sm)


def add_engine(engine, name='default'):
    if name == 'default':
        set_default_engine(engine)
    else:
        setattr(engines, name, engine)


def get_session():
    return sessions.default


def get_engine(name='default'):
    try:
        return getattr(engines, name)
    except AttributeError:
        raise RuntimeError("No engine '%s' was configured" % name)


def get_base():
    """Return the central SQLAlchemy declarative base. """
    return bases.default


def set_base(base):
    bases.default = base

#: Clear all.
reset()

#: SQLAlchemy session manager.
session = get_session()

#: The declarative Base
Base = get_base()


def create(uri, **kwargs):
    """
    Create engine

    :param uri:
    :param **kwargs:
    """
    if 'convert_unicode' not in kwargs:
        kwargs['convert_unicode'] = True

    return create_engine(uri, **kwargs)


def init_engine(config):
    """
    Initialize SQLAlchemy engine.

    :param config: Flask.app.config object
    """
    configs = config.get('SQLALCHEMY_DATABASE_URI')
    echo = config.get('SQLALCHEMY_ECHO')
    pool = config.get('SQLALCHEMY_POOL_RECYCLE')

    if isinstance(configs, dict):
        for k, v in configs.iteritems():
            engine = create(v, echo=echo, pool_recycle=pool)
            add_engine(engine, k)
    else:
        engine = create(config.get('SQLALCHEMY_DATABASE_URI'), echo=echo,
                        pool_recycle=pool)
        add_engine(engine)
