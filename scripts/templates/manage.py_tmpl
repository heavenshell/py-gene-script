#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
    {{project}}
    {{separator}}

    Application manage script.


    :copyright: (c) {{year}} {{author}}, All rights reserved.
    :license: BSD, see LICENSE for more details.
"""
from flask.ext.script import Manager
from {{project}}.app import create_app
from {{project}}.models.meta import session, Base

__author__ = '{{author}}'

app = create_app()
manager = Manager(app)


@manager.command
def create_all():
    """ Create all table. """
    Base.metadata.create_all(bind=session.bind)
    print('\033[31m{0}\033[0m'.format('Create database success.'))


@manager.command
def drop_all():
    """ Drop all table. """
    Base.metadata.drop_all(bind=session.bind)
    print('\033[31m{0}\033[0m'.format('Drop database success.'))


@manager.command
def show_urls():
    """ Displays all of the url matching routes for the project. """
    print(app.url_map)


@manager.command
def shell():
    """ Run a Python shell inside Flask application context. """
    try:
        from bpython import embed
        embed({"app": app})
    except:
        pass


@manager.command
def rungevent(bind='127.0.0.1', port=7777):
    """ Run a application use gevent http server. """
    from gevent import monkey
    monkey.patch_all()
    from gevent.wsgi import WSGIServer
    from werkzeug.serving import run_with_reloader

    @run_with_reloader
    def run():
        print('http://{0}:{1}/ is running.'.format(bind, port))
        http_server = WSGIServer(('', port), app)
        http_server.serve_forever()

    run()


@manager.command
def view(name=''):
    """ Create view. """
    if name is '':
        return

    from scripts.manage import Generator
    gen = Generator(author=__author__)
    gen.create_view('{{project}}', name)
    gen.create_test('{{project}}', 'views/{0}'.format(name))


@manager.command
def rest(name=''):
    """ Create RESTful view. """
    if name is '':
        return

    from scripts.manage import Generator
    gen = Generator(author=__author__)
    gen.create_rest('{{project}}', name)
    gen.create_test('{{project}}', 'views/{0}'.format(name))


@manager.command
def model(name=''):
    """ Create domain model. """
    if name is '':
        return

    from scripts.manage import Generator
    gen = Generator(author=__author__)
    gen.create_file('{{project}}', name, 'models')
    gen.create_test('{{project}}', 'models/{0}'.format(name))


@manager.command
def entity(name=''):
    """ Create entity. """
    if name is '':
        return

    from scripts.manage import Generator
    gen = Generator(author=__author__)
    gen.create_entity('{{project}}', 'entities/{0}'.format(name))
    gen.create_test('{{project}}', 'models/entities/{0}'.format(name))


@manager.command
def form(name=''):
    """ Create form. """
    if name is '':
        return

    from scripts.manage import Generator
    gen = Generator(author=__author__)
    gen.create_file('{{project}}', name, 'forms')
    gen.create_test('{{project}}', 'forms/{0}'.format(name))


@manager.command
def test(name=''):
    """ Create test. """
    if name is '':
        return

    from scripts.manage import Generator
    gen = Generator(author=__author__)
    gen.create_test('{{project}}', name)


if __name__ == '__main__':
    manager.run()
