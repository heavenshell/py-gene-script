# -*- coding: utf-8 -*-
"""
    {{project}}.app
    {{separator}}

    Application factories.

    Original code is `newsmeme <https://github.com/danjac/newsmeme/>`.

    :copyright: (c) 2010 by Dan Jacob.
    :copyright: (c) {{year}} Shinya Ohyanagi, All rights reserved.
    :license: BSD, see LICENSE for more details.
"""
import os
import re
import logging
from logging.handlers import TimedRotatingFileHandler
from flask import Flask, request, render_template, url_for, json
from flask_babel import Babel, gettext as _
from flask_principal import Principal, identity_loaded, RoleNeed
from flask_kvsession import KVSessionExtension
from simplekv.memory.redisstore import RedisStore
from {{project}}.configs.settings import Settings
from {{project}}.extensions import cache, csrf
from {{project}}.models.db import init_engine, Session, session
from {{project}}.views import views
from {{project}}.utils.compat import iteritems
from {{project}}.utils.redis import configure_redis

__all__ = ['create_app']


def create_app(config=None, app_name=None, modules=None, injector=None):
    """
    Create application.

    :param config: Configuration
    :param app_name: Application name
    :param modules: View modules
    """
    if app_name is None:
        app_name = '{{project}}'

    if modules is None:
        modules = views

    app = Flask(app_name)

    configure_settings(app, config)
    configure_logging(app)
    configure_session(app)
    configure_extensions(app)
    configure_modules(app, modules)
    configure_errorhandlers(app)
    configure_injector(app, injector)
    configure_jinja2(app)

    if 'LANGS' in app.config:
        configure_i18n(app)

    if 'MIDDLEWARES' in app.config:
        configure_middlewares(app)

    @app.before_request
    def before_request():
        pass

    @app.after_request
    def after_request(response):
        if response.headers.get('X-Frame-Options') is None:
            response.headers['X-Frame-Options'] = 'deny'

        if response.headers.get('X-Content-Type-Options') is None:
            response.headers['X-Content-Type-Options'] = 'nosniff'

        return response

    @app.teardown_request
    def session_clear(exception=None):
        if exception and Session.is_active:
            session.rollback()

        Session.close()
        Session.remove()

    app.logger.info('Initialize app success.')

    return app


def configure_settings(app, config):
    """
    Configure application.

    :param app: :class:`flask.Flask`
    :param config: Configuration.
    """
    if config is not None:
        app.config.from_object(config)
    else:
        app.config.from_object(Settings())

    app.config.from_envvar('FLASK_APP_CONFIG', silent=True)
    root_path = os.path.dirname(app.root_path)

    if 'DATA_DIR' not in app.config:
        app.config['DATA_DIR'] = '{root}/data/'

    data_dir = app.config['DATA_DIR'].format(root=root_path)
    app.config.update({'DATA_DIR': data_dir})


def configure_session(app):
    """
    Configure Flask session.

    :param app: :class:`flask.Flask`
    """
    config = app.config.get('SESSION_SETTINGS')
    if config is None:
        return

    if config['type'] == 'redis':
        redis = configure_redis(config, 'SESSION_SETTINGS')
        store = RedisStore(redis)
        KVSessionExtension(store, app)

        app.logger.info(redis)
    app.logger.info('Configure session success.')


def configure_logging(app):
    """
    Configure logger.

    Logger object set to utils.logging class.

    :param app: :class:`flask.Flask`
    """
    formatter = logging.Formatter(
        '%(asctime)s %(levelname)s: %(message)s '
        '[in %(pathname)s:%(lineno)d]'
    )

    if 'LOG_LEVEL' not in app.config:
        app.config['LOG_LEVEL'] = logging.INFO

    app.logger.setLevel(app.config['LOG_LEVEL'])

    root_path = os.path.dirname(app.root_path)

    if 'APP_LOG' not in app.config:
        app.config['APP_LOG'] = 'logs/app.log'

    if 'ERROR_LOG' not in app.config:
        app.config['ERROR_LOG'] = 'logs/error.log'

    app_log = os.path.join(root_path, app.config['APP_LOG'])
    app_log_root_path = os.path.dirname(app_log)
    if not os.path.exists(app_log_root_path):
        os.makedirs(app_log_root_path)

    app_file_handler = TimedRotatingFileHandler(app_log, when='D',
                                                interval=10,
                                                backupCount=10)

    app_file_handler.setLevel(app.config['LOG_LEVEL'])
    app_file_handler.setFormatter(formatter)
    app.logger.addHandler(app_file_handler)

    error_log = os.path.join(root_path, app.config['ERROR_LOG'])
    error_log_root_path = os.path.dirname(error_log)
    if not os.path.exists(error_log_root_path):
        os.makedirs(error_log_root_path)

    error_file_handler = TimedRotatingFileHandler(error_log, when='D',
                                                  interval=10,
                                                  backupCount=10)

    error_file_handler.setLevel(logging.ERROR)
    error_file_handler.setFormatter(formatter)
    app.logger.addHandler(error_file_handler)

    logger = logging.getLogger(app.logger_name)
    logger.addHandler(app_file_handler)
    logger.addHandler(error_file_handler)

    logger.info('Initialize logger.')
    logger.info('debug.log is `%s`.', app.config['APP_LOG'])
    logger.info('error.log is `%s`.', app.config['ERROR_LOG'])


def configure_modules(app, modules):
    """
    Configure modules.

    :param app: :class:`flask.Flask`
    :param modules: Module list
    """
    for module in modules:
        app.register_blueprint(module)


def configure_extensions(app):
    """
    Configure Flask extensions.

    :param app: :class:`flask.Flask`
    """
    #: SQAlchemy settings.
    if 'SQLALCHEMY_DATABASE_URI' in app.config:
        init_engine(app.config)
        app.logger.info('Initialize SQLAlchemy success.')

    #: Cache settings.
    if 'CACHE_TYPE' in app.config:
        cache.init_app(app)
        app.logger.info('Initialize cache success.')
        app.logger.info('Cache type is `{0}`.'.format(app.config['CACHE_TYPE']))

    #: CSRF protection settings.
    csrf.init_app(app)
    app.logger.info('Initialize CSRF protection success.')

    #: Upload settings.
    if 'UPLOADED_FILES_DEST' in app.config:
        root_path = os.path.dirname(app.root_path)
        uploads_dest = app.config.get('UPLOADED_FILES_DEST')
        if not uploads_dest.startswith('/'):
            uploads_dest = '{0}/var/uploads'.format(root_path)

        app.config.update({'UPLOADED_FILES_DEST': uploads_dest})
        app.logger.info('Upload files dest is `{0}`.'.format(uploads_dest))


def configure_injector(app, modules=None):
    """
    Configure Flask-Injector for DI Container.

    :param app: :class:`flask.Flask`
    :param injector: Injector module
    """
    pass


def configure_identity(app):
    """
    Configure identity.

    :param app: :class:`flask.Flask`
    """
    Principal(app)

    @identity_loaded.connect_via(app)
    def on_identity_loaded(sender, identity):
        role = identity.id
        app.logger.debug('Permission is `%s`.', identity)

        roles = app.config.get('ROLES')
        for name, value in iteritems(roles):
            if role >= value:
                app.logger.debug('Role is `%`, value is `%s`.' role, value)
                identity.provides.add(RoleNeed(name))

    app.logger.info('Initialize identity success.')


def configure_i18n(app):
    """
    Configure Babel settings.

    :param app: :class:`flask.Flask`
    """
    babel = Babel(app)

    @babel.localeselector
    def get_locale():
        return request.accept_languages.best_match(app.config.get('LANGS'))

    app.logger.info('Initialize i18n success.')


def configure_jinja2(app):
    """
    Configure Jinja2 env.

    :param app: :class:`flask.Flask`
    """
    def url_for_other_page(page):
        args = request.view_args.copy()
        args['page'] = page
        return url_for(request.endpoint, **args)

    def nl2br(data):
        return data.replace('\n', '<br />')

    app.jinja_env.globals['url_for_other_page'] = url_for_other_page
    app.jinja_env.filters.update({'basename': os.path.basename})
    app.jinja_env.filters.update({'nl2be': nl2br})

    app.logger.info('Initialize Jinja2 filter success.')


def configure_middlewares(app):
    """
    Configure middlewares.

    Middlewares could set in settings.py.

    :param app: :class:`flask.Flask`
    """
    middlewares = app.config['MIDDLEWARES']
    if not isinstance(middlewares, tuple):
        middlewares = (middlewares,)
    for middleware in middlewares:
        target = middleware.split('.')
        module = '.'.join(target[0:-1])
        name = target[-1]
        klass = getattr(__import__(module, fromlist=[name]), name)
        app.wsgi_app = klass(app)
        app.logger.info('Register `%s.%s` success.', module, name)

    app.logger.info('Initialize middleware success.')


def configure_errorhandlers(app):
    """
    Error handler.

    Handling error pages.

    :param app: :class:`flask.Flask`
    """
    r = re.compile(r'^/admin')

    @app.errorhandler(403)
    def forbidden(error):
        if request.is_xhr:
            return json.dumps(dict(error=_('Sorry, not allowed')))

        if r.match(request.path):
            return render_template('errors/admin/403.html', error=error), 403

        return render_template('errors/403.html', error=error), 403

    @app.errorhandler(404)
    def notfound(error):
        if request.is_xhr:
            return json.dumps(dict(error=_('404 Page not found')))

        if r.match(request.path):
            return render_template('errors/admin/404.html', error=error), 404

        return render_template('errors/404.html', error=error), 404

    app.logger.info('Initialize errorhandlers success.')
