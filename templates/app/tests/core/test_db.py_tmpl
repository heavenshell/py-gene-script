# -*- coding: utf-8 -*-
"""
    {{project}}.tests.core.test_db
    {{separator}}

    DB tests.

    :copyright: (c) {{year}} Shinya Ohyanagi, All rights reserved.
    :license: BSD, see LICENSE for more details.
"""
import os
import sys
from unittest import TestCase
from sqlalchemy import Column, Integer, String
from {{project}}.configs.settings import Settings
from {{project}}.app import create_app
from {{project}}.models.db import session, Base, get_engine, create, remove_engine

if sys.version_info[0] == 2:
    from cStringIO import StringIO
else:
    from io import StringIO


PATH = os.path.join(os.path.dirname(os.path.abspath(__file__)), 'var')
MASTER = 'sqlite:///{0}/master.db'.format(PATH)
SLAVE = 'sqlite:///{0}/slave.db'.format(PATH)


class HookStdOut(object):
    def __init__(self):
        self.fp = StringIO()
        self.orig_stdout = sys.stdout
        sys.stdout = self.fp

    def dump(self):
        self.fp.seek(0)
        return self.fp.read()

    def __enter__(self):
        return self

    def __exit__(self, *args):
        sys.stdout = self.orig_stdout


class TestMultiSettings(Settings):
    SQLALCHEMY_DATABASE_URI = MASTER
    SQLALCHEMY_BINDS = {
        'slave': SLAVE
    }
    SQLALCHEMY_ECHO = False


class Person(Base):
    __tablename__ = 'core_test_people'
    id = Column(Integer, primary_key=True)
    first_name = Column(String(100), nullable=False)


class EngineTest(TestCase):
    def setUp(self):
        config = TestMultiSettings()
        self.app = create_app(config=config)

    def tearDown(self):
        Base.metadata.drop_all()
        remove_engine()
        master = '{0}/master.db'.format(PATH)
        if os.path.exists(master):
            os.remove(master)

    def test_init_engine(self):
        """ DB engine should create when create_app() loaded. """
        self.assertEqual(str(get_engine().url), MASTER)
        self.assertEqual(str(get_engine('slave').url), SLAVE)

    def test_create_engine(self):
        """ db.create() should create DB engine. """
        uri = MASTER
        pool_recycle = 3600
        engine = create(uri, echo=False, pool_recycle=pool_recycle)
        self.assertEqual(str(engine.url), MASTER)


class BaseTest(TestCase):
    def setUp(self):
        config = TestMultiSettings()
        self.app = create_app(config=config)

    def tearDown(self):
        master = '{0}/master.db'.format(PATH)
        slave = '{0}/slave.db'.format(PATH)
        if os.path.exists(master):
            os.remove(master)

        if os.path.exists(slave):
            os.remove(slave)

        remove_engine()

    def test_model_insert(self):
        """ Insert data from model. """
        Base.metadata.create_all()
        foo = Person(id=1, first_name='foo')
        bar = Person(id=2, first_name='bar')

        session.add_all([foo, bar])
        session.commit()

        row = session.query(Person).filter(Person.id==1).one()
        self.assertEqual(row.first_name, foo.first_name)

    def test_model_find(self):
        """ Find data by using model. """
        Base.metadata.create_all()
        foo = Person(id=1, first_name='foo')
        bar = Person(id=2, first_name='bar')

        session.add_all([foo, bar])
        session.commit()

        rows = session.query(Person).all()
        self.assertEqual(rows[0].first_name, foo.first_name)
        self.assertEqual(rows[1].first_name, bar.first_name)

    def test_slave_engine(self):
        """ Insert to another database. """
        engine = get_engine('slave')
        Base.metadata.bind = get_engine('slave')
        Base.metadata.create_all()

        foo = Person(id=1, first_name='foo')
        bar = Person(id=2, first_name='bar')

        session.configure(bind=engine)
        session.add_all([foo, bar])
        session.commit()

        row = session.query(Person).filter(Person.id==1).one()
        self.assertEqual(row.first_name, foo.first_name)
        remove_engine('slave')


class RepresentableBaseTest(TestCase):
    def setUp(self):
        config = TestMultiSettings()
        self.app = create_app(config=config)

    def test_should_repr(self):
        """ print(SQLAlchemy.model) should output object repr. """
        p = Person(id=1, first_name='foo')

        with HookStdOut() as hook:
            print(p)
            data = hook.dump()
            self.assertEqual(data, "<Person(first_name='foo', id=1)>\n")
